apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

def excludedDirs = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/*$Lambda$*.*',
        '**/*Module.*',
        '**/*Dagger*.*',
        '**/*MembersInjector*.*',
        '**/*_Provide*Factory*.*',
        '**/Manifest*.*',
        '**/*Activity*.*',
        '**/*Dialog.*',
        '**/*Fragment*.*',
        '**/*ViewHolder*.*',
        '**/*Adapter*.*',
        '**/*zxing**',
        '**/*customviews**',
        '**/*databinding**',
        '**/injection**',
        '**/directory**',
        '**/adapter**',
        '**/models**',
        '**/extensions**',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*_Factory.*',
        '**/*$*$*.*' // Anonymous classes generated by kotlin
]

def coverageSourceDirs = allDirsMatching(/.*src\/main\/java$/) + allDirsMatching(/.*src\/main\/kotlin$/)

task jacocoRootReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the Debug build."

    getClassDirectories().setFrom(files())
    getSourceDirectories().setFrom(coverageSourceDirs)

    getExecutionData().setFrom(fileTree(dir: '.').matching { include '**/build/jacoco/*.exec' })

    reports {
        xml.enabled = true
        html.enabled = true
    }

    onlyIf = { true }

    doFirst {
        getClassDirectories().setFrom(
            dirsToFileTrees(
                allDirsMatching(/\/intermediates\/classes\/.*[Dd]ebug$/) +
                        allDirsMatching(/\/tmp\/kotlin-classes\/.*[Dd]ebug$/) +
                        allDirsMatching(/\/build\/classes\/java\/main$/) +
                        allDirsMatching(/\/build\/classes\/kotlin\/main$/),
                excludedDirs)
        )
    }
}

subprojects {
    it.tasks.whenTaskAdded { newTask ->
        if (newTask.name == 'testCoverage') {
            jacocoRootReport.configure {
                dependsOn(newTask)
            }
        }
    }
}

private def dirsToFileTrees(FileCollection coverageClassDirectories, excludedDirs) {
    def classFiles = []
    coverageClassDirectories.forEach {
        classFiles += fileTree(dir: it, excludes: excludedDirs)
    }
    files(classFiles)
}

def allDirsMatching(regex) {
    def names = []
    fileTree('.').visit { FileVisitDetails details ->
        if (details.file.isDirectory()) names << details.file
    }
    files(names.findAll {
        it.path =~ regex &&
                !(it.path =~ /.*\/buildSrc\/.*/)
    })
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    sourceDirs = coverageSourceDirs.toList()
}

tasks.coveralls {
    dependsOn 'jacocoRootReport'
}